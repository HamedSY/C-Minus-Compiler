first_sets = {
    'Program': ['int', 'void', 'ε'],
    'DeclarationList': ['int', 'void', 'ε'],
    'Declaration': ['int', 'void'],
    'DeclarationInitial': ['int', 'void'],
    'DeclarationPrime': [';', '[', '('],
    'VarDeclarationPrime': [';', '['],
    'FunDeclarationPrime': ['('],
    'TypeSpecifier': ['int', 'void'],
    'Params': ['int', 'void'],
    'ParamList': [',', 'ε'],
    'Param': ['int', 'void'],
    'ParamPrime': ['[', 'ε'],
    'CompoundStmt': ['{'],
    'StatementList': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', '+', '-', 'ε'],
    'Statement': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', '+', '-'],
    'ExpressionStmt': ['ID', ';', 'NUM', '(', 'break', '+', '-'],
    'SelectionStmt': ['if'],
    'ElseStmt': ['endif', 'else'],
    'IterationStmt': ['while'],
    'ReturnStmt': ['return'],
    'ReturnStmtPrime': ['ID', ';', 'NUM', '(', '+', '-'],
    'Expression': ['ID', 'NUM', '(', '+', '-'],
    'B': ['[', '(', '=', '<', '==', '+', '-', '*', '/', 'ε'],
    'H': ['=', '<', '==', '+', '-', '*', '/', 'ε'],
    'SimpleExpressionZegond': ['NUM', '(', '+', '-'],
    'SimpleExpressionPrime': ['(', '<', '==', '+', '-', '*', '/', 'ε'],
    'C': ['<', '==', 'ε'],
    'Relop': ['<', '=='],
    'AdditiveExpression': ['ID', 'NUM', '(', '+', '-'],
    'AdditiveExpressionPrime': ['(', '+', '-', '*', '/', 'ε'],
    'AdditiveExpressionZegond': ['NUM', '(', '+', '-'],
    'D': ['+', '-', 'ε'],
    'Addop': ['+', '-'],
    'Term': ['ID', 'NUM', '(', '+', '-'],
    'TermPrime': ['(', '*', '/', 'ε'],
    'TermZegond': ['NUM', '(', '+', '-'],
    'G': ['*', '/', 'ε'],
    'Mulop': ['*', '/'],
    'SignedFactor': ['ID', 'NUM', '(', '+', '-'],
    'SignedFactorPrime': ['(', 'ε'],
    'SignedFactorZegond': ['NUM', '(', '+', '-'],
    'Factor': ['ID', 'NUM', '('],
    'VarCallPrime': ['[', '(', 'ε'],
    'VarPrime': ['[', 'ε'],
    'FactorPrime': ['(', 'ε'],
    'FactorZegond': ['NUM', '('],
    'Args': ['ID', 'NUM', '(', '+', '-', 'ε'],
    'ArgList': ['ID', 'NUM', '(', '+', '-'],
    'ArgListPrime': [',', 'ε']
}

follow_sets = {
    'Program': ['$'],
    'DeclarationList': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    'Declaration': ['ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    'DeclarationInitial': [';', '[', '(', ')', ','],
    'DeclarationPrime': ['ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    'VarDeclarationPrime': ['ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    'FunDeclarationPrime': ['ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    'TypeSpecifier': ['ID'],
    'Params': [')'],
    'ParamList': [')'],
    'Param': [')', ','],
    'ParamPrime': [')', ','],
    'CompoundStmt': ['ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-', '$'],
    'StatementList': ['}'],
    'Statement': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'ExpressionStmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'SelectionStmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'ElseStmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'IterationStmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'ReturnStmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'ReturnStmtPrime': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'while', 'return', '+', '-'],
    'Expression': [';', ']', ')', ','],
    'B': [';', ']', ')', ','],
    'H': [';', ']', ')', ','],
    'SimpleExpressionZegond': [';', ']', ')', ','],
    'SimpleExpressionPrime': [';', ']', ')', ','],
    'C': [';', ']', ')', ','],
    'Relop': ['ID', 'NUM', '(', '+', '-'],
    'AdditiveExpression': [';', ']', ')', ','],
    'AdditiveExpressionPrime': [';', ']', ')', ',', '<', '=='],
    'AdditiveExpressionZegond': [';', ']', ')', ',', '<', '=='],
    'D': [';', ']', ')', ',', '<', '=='],
    'Addop': ['ID', 'NUM', '(', '+', '-'],
    'Term': [';', ']', ')', ',', '<', '==', '+', '-'],
    'TermPrime': [';', ']', ')', ',', '<', '==', '+', '-'],
    'TermZegond': [';', ']', ')', ',', '<', '==', '+', '-'],
    'G': [';', ']', ')', ',', '<', '==', '+', '-'],
    'Mulop': ['ID', 'NUM', '(', '+', '-'],
    'SignedFactor': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'SignedFactorPrime': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'SignedFactorZegond': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'Factor': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'VarCallPrime': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'VarPrime': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'FactorPrime': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'FactorZegond': [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    'Args': [')'],
    'ArgList': [')'],
    'ArgListPrime': [')']
}

predict_sets = {
    1: ['int', 'void', '$'],
    2: ['int', 'void'],
    3: ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'while', 'return', '+', '-', '$'],
    4: ['int', 'void'],
    5: ['int', 'void'],
    6: ['('],
    7: [';', '['],
    8: [';'],
    9: ['['],
    10: ['('],
    11: ['int'],
    12: ['void'],
    13: ['int'],
    14: ['void'],
    15: [','],
    16: [')'],
    17: ['int', 'void'],
    18: ['['],
    19: [')', ','],
    20: ['{'],
    21: ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', '+', '-'],
    22: ['}'],
    23: ['ID', ';', 'NUM', '(', 'break', '+', '-'],
    24: ['{'],
    25: ['if'],
    26: ['while'],
    27: ['return'],
    28: ['ID', 'NUM', '(', '+', '-'],
    29: ['break'],
    30: [';'],
    31: ['if'],
    32: ['endif'],
    33: ['else'],
    34: ['while'],
    35: ['return'],
    36: [';'],
    37: ['ID', 'NUM', '(', '+', '-'],
    38: ['NUM', '(', '+', '-'],
    39: ['ID'],
    40: ['='],
    41: ['['],
    42: [';', ']', '(', ')', ',', '<', '==', '+', '-', '*', '/'],
    43: ['='],
    44: [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    45: ['NUM', '(', '+', '-'],
    46: [';', ']', '(', ')', ',', '<', '==', '+', '-', '*', '/'],
    47: ['<', '=='],
    48: [';', ']', ')', ','],
    49: ['<'],
    50: ['=='],
    51: ['ID', 'NUM', '(', '+', '-'],
    52: [';', ']', '(', ')', ',', '<', '==', '+', '-', '*', '/'],
    53: ['NUM', '(', '+', '-'],
    54: ['+', '-'],
    55: [';', ']', ')', ',', '<', '=='],
    56: ['+'],
    57: ['-'],
    58: ['ID', 'NUM', '(', '+', '-'],
    59: [';', ']', '(', ')', ',', '<', '==', '+', '-', '*', '/'],
    60: ['NUM', '(', '+', '-'],
    61: ['*', '/'],
    62: [';', ']', ')', ',', '<', '==', '+', '-'],
    63: ['*'],
    64: ['/'],
    65: ['+'],
    66: ['-'],
    67: ['ID', 'NUM', '('],
    68: [';', ']', '(', ')', ',', '<', '==', '+', '-', '*', '/'],
    69: ['+'],
    70: ['-'],
    71: ['NUM', '('],
    72: ['('],
    73: ['ID'],
    74: ['NUM'],
    75: ['('],
    76: [';', '[', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    77: ['['],
    78: [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    79: ['('],
    80: [';', ']', ')', ',', '<', '==', '+', '-', '*', '/'],
    81: ['('],
    82: ['NUM'],
    83: ['ID', 'NUM', '(', '+', '-'],
    84: [')'],
    85: ['ID', 'NUM', '(', '+', '-'],
    86: [','],
    87: [')']
}
